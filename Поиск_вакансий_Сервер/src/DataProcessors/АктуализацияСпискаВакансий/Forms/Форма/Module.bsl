
&НаКлиенте
Процедура ЗаполнитьВакансииHH(Команда)
	ЗаполнитьВакансииHHСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВакансииHHСервере()
	
	Город = Объект.Город;
	СайтВладелец = Перечисления.СайтыВладельцы.HHRU;
	//КоличествоНовыхСозданныхВакансий = 0;		
	// api.hh.ru/vacancies
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,,Защ);
	//СтрокаСоединения = "/vacancies";
	//СтрокаСоединения = "/api.hh.ru/vacancies?text=java&area=1&metro=6.8";
	// Зарплата 140к &salary=140000
	СтрокаСоединенияГлав = "/vacancies?text=программист 1С&area=1&per_page=100";
	
	//КлючевоеСлово = "Программист / Разработчик 1 С";
	// &archived=true 
	Если ЗначениеЗаполнено(КлючевоеСлово) Тогда
		СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"программист 1С",СокрЛП(КлючевоеСлово));		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Город) Тогда
		СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"&area=1","&area="+Город.Идентификатор);		
	КонецЕсли;	
	
	Для СтраницаСайта = 0 По 20 Цикл
		//Первые 100 вакансий per_page=100
		
		//ДобавитьЗаписьВЖУрналРегистрации("Страница " + Строка(СтраницаСайта)); //Страницы с Нулевой page=0
		
		СтрокаСоединения = СтрокаСоединенияГлав + "&page=" + СтраницаСайта ;
		
		//СтрокаСоединения = "/metro";
		
		//Полное представление вакансии
		//СтрокаСоединения = "/vacancies/31529733";
		
		HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);	
		HTTPЗапрос.Заголовки.Вставить("User-Agent", "api-test-agent");
		//HTTPЗапрос.Заголовки.Вставить("per_page", "10");
		
		ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
		Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
		
		НайденноВакансий = ПолучитьИзСоответствия(ДанныеКлиента,"found");
		КоличествоСтраниц = ПолучитьИзСоответствия(ДанныеКлиента,"pages");
		Ключ = "items";
		
		Массивitems = ДанныеКлиента.Получить(Ключ);
		
		Если Массивitems = Неопределено или Массивitems.Количество() = 0 Тогда 
			Прервать;	
		КонецЕсли;	
		КоличествоВакансийВСтранице = Массивitems.Количество();
		НомерВакансии = 0;
		Для Каждого Вакансия Из Массивitems Цикл
			НомерВакансии = НомерВакансии +1;
			//ДобавитьЗаписьВЖУрналРегистрации("Вакансия " + Строка(НомерВакансии)+ " из: " + Строка(КоличествоВакансийВСтранице));
			//Работодатель
			ключРаботодателя = "employer";
			ключНаименование ="name";
			ключКодРаботодателя = "id";
			
			Работодатель = ПолучитьИзСоответствия(Вакансия,ключРаботодателя);
			РаботодательНаименование =  ПолучитьИзСоответствия(Работодатель,ключНаименование); 
			РаботодательКод =  ПолучитьИзСоответствия(Работодатель,ключКодРаботодателя); 
			
			//РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);
			//
			//Если РаботодательСсылка = Неопределено Тогда
			//	РаботодательСсылка = СоздатьРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);			
			//КонецЕсли;	
			////Работодатель Конец
			//
			НаименованиеВакансии = ПолучитьИзСоответствия(Вакансия,ключНаименование);
			//
			СтруктураВакансии =   ПолучитьСтруктуруИзСоответствия(Вакансия); 
			//
			ВакансияСсылка = НайтиВакансию(СтруктураВакансии.id,СайтВладелец) ;
			
		Если ВакансияСсылка <> Неопределено Тогда
			Если ВакансияСсылка.Работодатель = Справочники.Работодатели.ПустаяСсылка() Тогда
				
		РаботодательСсылка =	 НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
	
					Иначе
				РаботодательСсылка = ВакансияСсылка.Работодатель;
				
	КонецЕсли;		
			Иначе				
				РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
			КонецЕсли;	
	
			СоздатьОбновитьВакансию(СтруктураВакансии.name,ВакансияСсылка,СтруктураВакансии,РаботодательСсылка,СайтВладелец,РаботодательКод,РаботодательНаименование);			
			
			
			
			//Прервать;	
		КонецЦикла;	
		//Прервать;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВакансииSuperJobНаСервере()
	Город = Объект.Город;
	СайтВладелец = Перечисления.СайтыВладельцы.SUPERJOBRU;
	СекретныйКлюч = "v3.r.130653776.402faf1af0ac735874342316725df10669778ba8.cfd7864931c63f362fc3bc50e1c56cfafcb0ed1a";
	ID = "1083";
	//КоличествоНовыхСозданныхВакансий = 0;		
	// api.hh.ru/vacancies
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.superjob.ru",,,,,,Защ);
	//СтрокаСоединения = "/2.0/vacancies/";
	СтрокаСоединения = "/2.0/oauth2/password/?login=aleks1506@my.com&password=6514nx&client_id=1338&client_secret=v3.r.130653776.402faf1af0ac735874342316725df10669778ba8.cfd7864931c63f362fc3bc50e1c56cfafcb0ed1a";
	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);	
	//ЗаголовкиHTTP = Новый djq;
	//ЗаголовкиHTTP.Вставить("GET " + "https://api.superjob.ru/2.0/vacancies/");
	
	//Ответ=HTTPСоединение.Получить("api.superjob.ru"+СтрокаСоединения+ "/vacancies");//POST	
	//Ответ=HTTPСоединение.Получить(ЗаголовкиHTTP);
	
	ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"date_pub_to,date_published",ФорматДатыJSON.ISO);
	
	access_token = ПолучитьИзСоответствия(ДанныеКлиента,"access_token");
	
	СтрокаПоиска = "Программист 1С";
	
	Если ЗначениеЗаполнено(КлючевоеСлово) Тогда
		СтрокаПоиска = КлючевоеСлово;	
	КонецЕсли;		
	//СтрокаПоиска = КодироватьСтроку(СтрокаПоиска, СпособКодированияСтроки.КодировкаURL);
	//СтрокаСоединения = "2.0/vacancies/?t=2&count=100&keywords=" + СтрокаПоиска + "&keywords=программист";
	СтрокаСоединения = "2.0/vacancies/?keyword=" + СтрокаПоиска + "&t=0&count=100&town=4";
	// &is_archive=true
	Если ЗначениеЗаполнено(Город) и Город = Справочники.Города.Санкт_Петербург Тогда
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения,"&town=4","&town="+Город.ИдентификаторSJ);	
		
	ИначеЕсли  ЗначениеЗаполнено(Город) и Город = Справочники.Города.Краснодар Тогда
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения,"&town=4","&town="+Город.ИдентификаторSJ);	
	ИначеЕсли  ЗначениеЗаполнено(Город) и Город = Справочники.Города.Рязань Тогда
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения,"&town=4","&town="+Город.ИдентификаторSJ);			
	КонецЕсли;	
	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);
	HTTPЗапрос.Заголовки.Вставить("X-Api-App-Id", СекретныйКлюч);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + access_token);
	
	ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	ОбработатьJSON(ЧтениеJSON, Результат);
	
	//Здесь на выходе из процедуры Результат = Соответствие;	
	Вакансии =  ПолучитьСтруктуруИзСоответствия(Результат); 
	Заголов333киHTTP = 23123;
	НомерВакансии = 0;
	КоличествоВакансийВСтранице = Вакансии.objects.Количество();
	Для каждого Вакансия из Вакансии.objects Цикл
		НомерВакансии = НомерВакансии + 1;
		//ДобавитьЗаписьВЖУрналРегистрации("Вакансия " + Строка(НомерВакансии)+ " из: " + Строка(КоличествоВакансийВСтранице));		
		idРаботодателя = Формат(Вакансия.id_client, "ЧГ=0");	
		idВакансии = Формат(Вакансия.id, "ЧГ=0");
		
		//РаботодательСсылка =  НайтиРаботодателя(Вакансия.firm_name,idРаботодателя,СайтВладелец);
		//
		//Если РаботодательСсылка = Неопределено Тогда
		//			
		//КонецЕсли;
		//
		ВакансияСсылка = НайтиВакансию(idВакансии,СайтВладелец) ;
		
		Если ВакансияСсылка <> Неопределено Тогда
		Если ВакансияСсылка.Работодатель = Справочники.Работодатели.ПустаяСсылка() Тогда
		РаботодательСсылка =   НайтиРаботодателя(Вакансия.firm_name,idРаботодателя,СайтВладелец);
		Иначе
		РаботодательСсылка = ВакансияСсылка.Работодатель;
		КонецЕсли;
		

		Иначе
		 РаботодательСсылка =  НайтиРаботодателя(Вакансия.firm_name,idРаботодателя,СайтВладелец);

		КонецЕсли;	
		
		СоздатьОбновитьВакансию(Вакансия.profession,ВакансияСсылка,Вакансия,РаботодательСсылка,СайтВладелец,idРаботодателя,Вакансия.firm_name);
	КонецЦикла;	
КонецПроцедуры

Функция НайтиВакансию(Код,СайтВладелец,Наименование=Неопределено)
	Вакансия = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВакансияНомерКомпанияВакансии.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВакансияНомерКомпанияВакансии КАК ВакансияНомерКомпанияВакансии
	|ГДЕ
	|	ВакансияНомерКомпанияВакансии.СайтыВладельцы = &СайтВладелец
	|	И ВакансияНомерКомпанияВакансии.НомерHH = &НомерHH";
	
	Запрос.УстановитьПараметр("НомерHH", Код);
	Запрос.УстановитьПараметр("СайтВладелец", СайтВладелец);
	
	//Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если  Выборка.Следующий() Тогда		
		Вакансия =  Выборка.Ссылка;
		//ДобавитьЗаписьВЖУрналРегистрации("Вакансия найдена " + Код );
	Иначе
		//ДобавитьЗаписьВЖУрналРегистрации("Вакансия не найдена " + Код )
	КонецЕсли;
	
	Возврат Вакансия;
	
КонецФункции

Процедура СоздатьОбновитьВакансию(НаименованиеВакансии,ВакансияСсылка,Структура,РаботодательСсылка,СайтВладелец,РаботодательКод,РаботодательНаименование);
	
	//ДобавитьЗаписьВЖУрналРегистрации("Функция ПоискЯзыкаПрограммирования");
	СписокЯзыков = ПоискЯзыкаПрограммирования(НаименованиеВакансии);
	Если СписокЯзыков.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;	
	
	//Если ВакансияСсылка <> Неопределено Тогда
	//ДобавитьЗаписиОЯзыкамВВакансияИЯзыкиПрограммирования(ВакансияСсылка,СписокЯзыков);
	//КонецЕсли;
	
	Город = Объект.Город;
	Если СайтВладелец = Перечисления.СайтыВладельцы.HHRU Тогда
		
		Если ВакансияСсылка = Неопределено Тогда
			СоздалиНовуюВакансию = Истина;
			НоваяВакансия = Документы.Вакансии.СоздатьДокумент();	
			НоваяВакансия.ДатаСоздания = ТекущаяДата();
			НоваяВакансия.Дата =  Структура.created_at;
			//НоваяВакансия.ДатаСозданияВакансии =  Структура.created_at;
			
			КоличествоНовыхСозданныхВакансий = КоличествоНовыхСозданныхВакансий + 1;
		Иначе
			Если Структура.published_at <> ВакансияСсылка.ДатаОбновленияВакансии или Удаленка=Истина Тогда	
				НоваяВакансия = ВакансияСсылка.ПолучитьОбъект();
				Сообщить(Структура.alternate_url);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		НоваяВакансия.ВАрхиве =  Структура.archived;
		НоваяВакансия.НаименованиеВакансии =  Структура.name;
				
		Если РаботодательСсылка = Неопределено Тогда
		РаботодательСсылка = СоздатьРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);		
		КонецЕсли;	
		НоваяВакансия.Работодатель = РаботодательСсылка;
		НоваяВакансия.ДатаОбновленияВакансии =  Структура.published_at;
		НоваяВакансия.НомерHH =  Структура.id;
		НоваяВакансия.URLСсылка =  Структура.alternate_url;
		НоваяВакансия.СайтВладелец = СайтВладелец;
		
		НоваяВакансия.КлючевоеСловоВПоиске = КлючевоеСлово;
		Если Удаленка = Истина Тогда
		НоваяВакансия.УдаленнаяРабота = Истина;
		НоваяВакансия.УдаленнаяРаботаГород = Структура.area.name;
		КонецЕсли;	
		//Язык =  ПоискЯзыкаПрограммирования(Структура.name);
		
		Если СоответствиеСпециализации(Структура.name) = Истина Тогда
			//НоваяВакансия.ЯзыкПрограммирования = Объект.ЯзыкПрограммирования;
			НоваяВакансия.Специализация = Объект.Специализация;				
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Город) и Удаленка = Ложь Тогда
			НоваяВакансия.Город = Город.Ссылка;
		Иначе
			НоваяВакансия.Город = Справочники.Города.НайтиПоНаименованию(Структура.area.name);	
		КонецЕсли;	
		
		Если (Структура.address) <> Неопределено и Удаленка = Ложь Тогда
			Если Структура.address.metro <> Неопределено Тогда
				НоваяВакансия.Метро =  Справочники.СтанцииМетро.НайтиПоНаименованию(Структура.address.metro.station_name);
			КонецЕсли;
			
			
			
			
			Если Структура.address.street <> Неопределено или Структура.address.building <> Неопределено Тогда
				НоваяВакансия.Адрес = Строка(Структура.address.street) + " " + Строка(Структура.address.building); 
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Структура.salary <> Неопределено Тогда
			НоваяВакансия.ЗарплатаОт =  Структура.salary.from;
			НоваяВакансия.ЗарплатаДо =  Структура.salary.to;
			НоваяВакансия.ДоНДФЛ =  Структура.salary.gross;
		КонецЕсли;
		
		
	Иначе
		//СуперДжоб	
		ДатаПубликацииВакансии = Дата(1970,1,1,3,0,0)  + Структура.date_published	;	
		ВакансияОпубликованаДо = Дата(1970,1,1,3,0,0)  + Структура.date_pub_to;	
		Если ВакансияСсылка = Неопределено Тогда
			
			НоваяВакансия = Документы.Вакансии.СоздатьДокумент();
			СоздалиНовуюВакансию = Истина;
			НоваяВакансия.ДатаСоздания = ТекущаяДата();
			НоваяВакансия.Дата =  ДатаПубликацииВакансии;		
			//НоваяВакансия.ДатаСозданияВакансии =  ДатаПубликацииВакансии;
			
			КоличествоНовыхСозданныхВакансий = КоличествоНовыхСозданныхВакансий + 1;
		Иначе
			Если ДатаПубликацииВакансии <> ВакансияСсылка.ДатаОбновленияВакансии Тогда	
				НоваяВакансия = ВакансияСсылка.ПолучитьОбъект();
				Сообщить(Структура.link);
			Иначе
				//НоваяВакансия = ВакансияСсылка.ПолучитьОбъект();
				Возврат;
			КонецЕсли;
		КонецЕсли;		
		//Формат(Вакансия.id, "ЧГ=0");
		НоваяВакансия.ВАрхиве =  Структура.is_archive;
		НоваяВакансия.НаименованиеВакансии =  Структура.profession;
		Если РаботодательСсылка = Неопределено Тогда
		РаботодательСсылка = СоздатьРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);		
		КонецЕсли;	
		НоваяВакансия.Работодатель = РаботодательСсылка;
		НоваяВакансия.ДатаОбновленияВакансии =  ДатаПубликацииВакансии;
		НоваяВакансия.НомерHH =  Формат(Структура.id, "ЧГ=0");
		НоваяВакансия.URLСсылка =  Структура.link;
		НоваяВакансия.СайтВладелец = СайтВладелец;			
		
		НоваяВакансия.КлючевоеСловоВПоиске = КлючевоеСлово;
		
		//Язык =  ПоискЯзыкаПрограммирования(Структура.profession);
		//ДобавитьЗаписьВЖУрналРегистрации("Функция СоответствиеСпециализации");
		Если СоответствиеСпециализации(Структура.profession) = Истина Тогда
			НоваяВакансия.Специализация = Объект.Специализация;
			//НоваяВакансия.ЯзыкПрограммирования = Объект.ЯзыкПрограммирования;
		КонецЕсли;		
		НоваяВакансия.Город = Справочники.Города.НайтиПоРеквизиту("ИдентификаторSJ",Строка(Структура.town.id));
		Попытка
			НоваяВакансия.Метро =  Справочники.СтанцииМетро.НайтиПоНаименованию(Структура.metro[0].title,Истина);	
		Исключение
		КонецПопытки;	
		НоваяВакансия.ЗарплатаОт =  Структура.payment_from;
		НоваяВакансия.ЗарплатаДо =  Структура.payment_to;
		//НоваяВакансия.ДоНДФЛ =  Структура.salary.gross;	
	КонецЕсли;	
	
	НоваяВакансия.Записать(РежимЗаписиДокумента.Проведение);
	Если СоздалиНовуюВакансию = Истина Тогда
		//СписокЯзыков = ПоискЯзыкаПрограммирования(НоваяВакансия.НаименованиеВакансии);
		//Если СписокЯзыков.Количество() > 0 Тогда
		ДобавитьЗаписиОЯзыкамВВакансияИЯзыкиПрограммирования(НоваяВакансия,СписокЯзыков);	
		//КонецЕсли;	
	КонецЕсли;	
	
	
	//ДобавитьЗаписьВЖУрналРегистрации("Функция последнее обновление вакансии");
	ПоследнееОбновлениеВакансии(НоваяВакансия,НоваяВакансия.ДатаОбновленияВакансии);
	
КонецПроцедуры	

Функция ПолучитьИзСоответствия(Соответствие,Ключ)
	
	СоответствиеНаУровеньНиже =  Соответствие.Получить(Ключ);
	
	Возврат СоответствиеНаУровеньНиже;
	
КонецФункции	

Функция НайтиРаботодателя(Наименование,Код,СайтВладелец)
	Работодатель = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работодатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Работодатели КАК Работодатели
	|ГДЕ
	|	Работодатели.НомерHH = &НомерHH
	|	И Работодатели.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НомерHH", Код);
	//Запрос.УстановитьПараметр("Наименование", Наименование);
	Если Код = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Работодатели.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Работодатели КАК Работодатели
		|ГДЕ
		|	Работодатели.Наименование = &Наименование
		|	И Работодатели.СайтВладелец = &СайтВладелец
		|	И Работодатели.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работодатели.Код";
		
		//Запрос.УстановитьПараметр("НомерHH", Код);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("СайтВладелец", СайтВладелец);
		
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если  Выборка.Следующий() Тогда		
		Работодатель =  Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Работодатель;
	
КонецФункции	

Функция СоздатьРаботодателя(Наименование,Код,СайтВладелец);
	РаботодательНовый = Справочники.Работодатели.СоздатьЭлемент();
	РаботодательНовый.Родитель =  Справочники.Работодатели.Работодатели;
	РаботодательНовый.Наименование = Наименование;
	РаботодательНовый.НомерHH = Код;
	РаботодательНовый.СайтВладелец =  СайтВладелец;
	РаботодательНовый.Записать();	
	
	Возврат  РаботодательНовый.Ссылка;
КонецФункции	

Функция ПолучитьСтруктуруИзСоответствия(ЗначВход) Экспорт
	
	СтруктураВозврат=Новый Структура;
	
	Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
		
		ФлагОщибка=Ложь;
		
		Для Каждого р Из ЗначВход Цикл
			Попытка
				СтруктураВозврат.Вставить(р.Ключ,ПолучитьСтруктуруИзСоответствия(р.Значение));
			Исключение
				ФлагОщибка=Истина;
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
			СтруктураВозврат = Новый Массив;
			Для Каждого р Из ЗначВход Цикл
				ДопСтруктура=Новый Структура;
				ДопСтруктура.Вставить("Ключ",р.Ключ);
				ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
				СтруктураВозврат.Добавить(ДопСтруктура);
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураВозврат; 
		
	ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
		
		НовыйМассив=Новый Массив;
		Для Каждого ЭлМ Из ЗначВход Цикл
			НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
		КонецЦикла;
		Возврат НовыйМассив;
		
	КонецЕсли;
	
	Возврат ЗначВход; 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтанцииМетроИГорода(Команда)
	ЗаполнитьСтанцииМетроНаСервереИГорода();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтанцииМетроНаСервереИГорода()
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,,Защ);
	//СтрокаСоединения = "metro/2";
	СтрокаСоединения = "metro/1";
	
	
	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);	
	HTTPЗапрос.Заголовки.Вставить("User-Agent", "api-test-agent");
	//HTTPЗапрос.Заголовки.Вставить("per_page", "10");
	
	ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	ДанныеСтанцийМетро = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
	
	ДанныеЛинииМетро =  ПолучитьСтруктуруИзСоответствия(ДанныеСтанцийМетро); 
	
	Для каждого СтрокаЛинииМетро из ДанныеЛинииМетро.lines Цикл
		
		СсылкаЛинияМетро = НайтиСоздатьЛиниюМетро(СтрокаЛинииМетро);	
		
		Для каждого СтрокаСтанцииМетро Из СтрокаЛинииМетро.stations Цикл
			
			НайтиСоздатьСтанциюМетро(СтрокаСтанцииМетро,СсылкаЛинияМетро) ;
			
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиСоздатьЛиниюМетро(СтрокаЛинииМетро)
	Город = Объект.Город;	
	ЛинияМетро = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛинииМетро.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЛинииМетро КАК ЛинииМетро
	|ГДЕ
	|	ЛинииМетро.НомерHH = &НомерHH
	|	И ЛинииМетро.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("НомерHH", СтрокаЛинииМетро.id);
	Запрос.УстановитьПараметр("Наименование", СтрокаЛинииМетро.name);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если  Выборка.Следующий() Тогда		
		ЛинияМетро =  Выборка.Ссылка;
	Иначе
		ЛинияМетро = Справочники.ЛинииМетро.СоздатьЭлемент();	
		ЛинияМетро.НомерHH = СтрокаЛинииМетро.id;
		ЛинияМетро.Наименование = СтрокаЛинииМетро.name;
		ЛинияМетро.Владелец = Справочники.Города.Москва;
		Если ЗначениеЗаполнено(Город) Тогда
			ЛинияМетро.Владелец =Город.Ссылка;	
		КонецЕсли;	
		ЛинияМетро.Цвет = СтрокаЛинииМетро.hex_color;
		ЛинияМетро.Записать();
		
	КонецЕсли;
	
	Возврат ЛинияМетро;
	
КонецФункции

Функция НайтиСоздатьСтанциюМетро(СтрокаСтанцииМетро,СсылкаЛинияМетро)
	
	ЛинияМетро = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтанцииМетро.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтанцииМетро КАК СтанцииМетро
	|ГДЕ
	|	СтанцииМетро.НомерHH = &НомерHH
	|	И СтанцииМетро.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("НомерHH", СтрокаСтанцииМетро.id);
	Запрос.УстановитьПараметр("Наименование", СтрокаСтанцииМетро.name);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если  Выборка.Следующий() Тогда		
		ЛинияМетро =  Выборка.Ссылка;
	Иначе
		ЛинияМетро = Справочники.СтанцииМетро.СоздатьЭлемент();	
		ЛинияМетро.НомерHH = СтрокаСтанцииМетро.id;
		ЛинияМетро.Наименование = СтрокаСтанцииМетро.name;
		ЛинияМетро.Владелец = СсылкаЛинияМетро.Ссылка;
		ЛинияМетро.Цвет = СсылкаЛинияМетро.Цвет;
		ЛинияМетро.Записать();
		
	КонецЕсли;
	
	Возврат ЛинияМетро;
	
КонецФункции

Функция ПоследнееОбновлениеВакансии(НоваяВакансия,ДатаАпдейта)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧастотаОбновленияВакансийСрезПоследних.Период КАК Дата
	|ИЗ
	|	РегистрСведений.ЧастотаОбновленияВакансий.СрезПоследних(, ) КАК ЧастотаОбновленияВакансийСрезПоследних
	|ГДЕ
	|	ЧастотаОбновленияВакансийСрезПоследних.Вакансия = &Вакансия
	|	И НЕ ЧастотаОбновленияВакансийСрезПоследних.Период ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Вакансия", НоваяВакансия.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() и Выборка.Дата <> null Тогда
		
		Если Выборка.Дата <> ДатаАпдейта Тогда
			МенеджерЗаписи = РегистрыСведений.ЧастотаОбновленияВакансий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Вакансия = НоваяВакансия.Ссылка;	
			МенеджерЗаписи.Период = ДатаАпдейта;
			МенеджерЗаписи.ВторисноеОбновлениеИБолее = Истина;
			МенеджерЗаписи.Количество = 1;
			МенеджерЗаписи.Записать();			
			
		КонецЕсли;	
	Иначе 
		
		МенеджерЗаписи = РегистрыСведений.ЧастотаОбновленияВакансий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Вакансия = НоваяВакансия.Ссылка;	
		МенеджерЗаписи.Период = ДатаАпдейта;
		МенеджерЗаписи.Количество = 1;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьJSON(ЧтениеJSON, Результат)
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Результат) = Тип("Массив") Тогда
				Результат.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Результат.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			ОбработатьJSON(ЧтениеJSON, НовыйОбъект);
			
			Если Результат = Неопределено Тогда
				Результат = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли
			TипJSON = ТипЗначенияJSON.Строка
			ИЛИ TипJSON = ТипЗначенияJSON.Число 
			
			ИЛИ TипJSON = ТипЗначенияJSON.Булево 
			ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
			Если ТипЗнч(Результат) = Тип("Массив") Тогда
				Результат.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
				Результат.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2)); // удалим открывающий символ структуры(массива)
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		
		Если ПервыйСимвол = "{" Тогда //вложенная структура
			
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "[" Тогда //вложенный массив
			
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			Иначе
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда //структура закончилась
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда //массив закончился
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				
				Если Поз = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз - 1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения, """", "");
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда //значение является структурой
					
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //значение является массивом
					
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
					
				Иначе // обычное значение
					
					ПервыйКавычка = Ложь;
					ПредпоследнийКавычка = Ложь;
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						
						Если Символ = """" Тогда
							
							Если ПервыйКавычка Тогда
								
								ПредпоследнийКавычка = Истина;
								
							Иначе
								ПервыйКавычка = Истина;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если (Символ = "," И ((ПервыйКавычка И ПредпоследнийКавычка) Или (Не ПервыйКавычка И Не ПредпоследнийКавычка))) ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							
							Поз = Сч;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если Поз = 0 Тогда
						
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						
						Значение = Лев(ТекстJSON, Поз - 1);
						Значение = СтрЗаменить(Значение, """", "");
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда //обычное значение
				
				Поз = 0;
				
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					
					Символ = Сред(ТекстJSON, Сч, 1);
					
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						
						Поз = Сч;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Поз = 0 Тогда
					
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					
					Значение = Лев(ТекстJSON, Поз - 1);
					Значение = СтрЗаменить(Значение, """", "");
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВакансииSuperJob(Команда)
	ЗаполнитьВакансииSuperJobНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоВсехСайтов(Команда)
	КоличествоНовыхСозданныхВакансий = 0;
	ЗаполнитьСоВсехСайтовНаСервере();
	//ЗаполнитьВакансииHHСервереУдаленка();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоВсехСайтовНаСервере()
	ПользовательБазы = ОбщегоНазначения.УзнатьПользователяБазы();
	Если  ПользовательБазы = "ФоновоеЗаданиеМосква" Тогда
		Объект.Город = Справочники.Города.Москва;		
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЯзыкиПрограммирования.Наименование КАК ЯзыкПредставление,
	|	ЯзыкиПрограммирования.Ссылка КАК ЯзыкПрограммирования,
	|	ЕСТЬNULL(ЯзыкиПрограммированияСловаВхождения.Слово.Наименование, """") + "" "" + ЯзыкиПрограммирования.Наименование КАК КлючевоеСлово,
	|	Города.Ссылка КАК Город,
	|	ЯзыкиПрограммирования.Код КАК Код
	|ИЗ
	|	Справочник.ЯзыкиПрограммирования КАК ЯзыкиПрограммирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЯзыкиПрограммирования.СловаВхождения КАК ЯзыкиПрограммированияСловаВхождения
	|		ПО ЯзыкиПрограммирования.Ссылка = ЯзыкиПрограммированияСловаВхождения.Ссылка,
	|	Справочник.Города КАК Города
	|ГДЕ
	|	ИСТИНА
	|	И ЯзыкиПрограммирования.Обновлять = ИСТИНА
	|	И Города.Обновлять = ИСТИНА
	|	И &Город
	|	И &ЯзыкиПрограммирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Город,
	|	ЯзыкиПрограммирования.Код";
	Если ЗначениеЗаполнено(Объект.Город) и ПользовательБазы <> "ФоновоеЗадание" и ПользовательБазы <> "ФоновоеЗаданиеМосква" Тогда
	Запрос.УстановитьПараметр("Город", Объект.Город);
	Запрос.УстановитьПараметр("ЯзыкиПрограммирования", Объект.ЯзыкПрограммирования);
	Если Только1С=Истина Тогда
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЯзыкиПрограммирования","ЯзыкиПрограммирования.Код В (""000000001"",""000000002"")");
	Иначе
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЯзыкиПрограммирования","ЯзыкиПрограммирования.Ссылка В (&ЯзыкиПрограммирования)");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Город","Города.Ссылка = &Город");
	
	Иначе
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Город","Истина");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЯзыкиПрограммирования","Истина");
	КонецЕсли;
	
	ВремяЗапуска = ТекущаяДата();
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ВыборкаЯзыковИКлючевыхСлов = Результат.Выбрать();
	
	Пока ВыборкаЯзыковИКлючевыхСлов.Следующий() Цикл
			Объект.ЯзыкПрограммирования = ВыборкаЯзыковИКлючевыхСлов.ЯзыкПрограммирования;
			Объект.Город = ВыборкаЯзыковИКлючевыхСлов.Город.Ссылка;		
		   	КлючевоеСлово = СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово);
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с HH:" + " Город " + Объект.Город.Наименование + " " + " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));

			ЗаполнитьВакансииHHСервере();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с SuperJob:" + " Город " + Объект.Город.Наименование + " " +  " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
			ЗаполнитьВакансииSuperJobНаСервере();	

		
	КонецЦикла;
	
	ДобавитьЗаписьВЖУрналРегистрацииАдм("Готово.Вакансии актуальны, времени затрачено: "  +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));	
	Сообщить("Готово.Вакансии актуальны, времени затрачено: "  +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));
	
	Объект.Город = Справочники.Города.ПустаяСсылка();
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьСоВсехСайтовНаСервереOLD()
	Если  УзнатьПользователяБазы() = "ФоновоеЗаданиеМосква" Тогда
		Объект.Город = Справочники.Города.Москва;	
	
	КонецЕсли;	
	
	ГородаСправочник = Справочники.Города.Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯзыкиПрограммирования.Наименование КАК ЯзыкПредставление,
	|	ЯзыкиПрограммирования.Ссылка КАК ЯзыкПрограммирования,
	|	ЕСТЬNULL(ЯзыкиПрограммированияСловаВхождения.Слово.Наименование, """") + "" "" + ЯзыкиПрограммирования.Наименование КАК КлючевоеСлово
	|ИЗ
	|	Справочник.ЯзыкиПрограммирования КАК ЯзыкиПрограммирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЯзыкиПрограммирования.СловаВхождения КАК ЯзыкиПрограммированияСловаВхождения
	|		ПО ЯзыкиПрограммирования.Ссылка = ЯзыкиПрограммированияСловаВхождения.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И ЯзыкиПрограммирования.Обновлять = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЯзыковИКлючевыхСлов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЯзыковИКлючевыхСлов.Следующий() Цикл
		ДобавитьЗаписьВЖУрналРегистрацииАдм("Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
		Если ЗначениеЗаполнено(Объект.Город) и УзнатьПользователяБазы() <> "ФоновоеЗадание" Тогда
			Объект.ЯзыкПрограммирования = ВыборкаЯзыковИКлючевыхСлов.ЯзыкПрограммирования;
			//Объект.Специализация = Объект.Специализация;
			Объект.Город = Объект.Город.Ссылка;
			КлючевоеСлово = СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово);
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с HH:" + " Город " + Объект.Город.Наименование + " " + " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
			ЗаполнитьВакансииHHСервере();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с SuperJob:" + " Город " + Объект.Город.Наименование + " " +  " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
			ЗаполнитьВакансииSuperJobНаСервере();			
		Иначе
			
			Пока ГородаСправочник.Следующий() Цикл
				Если  ГородаСправочник.Обновлять = Истина Тогда
					Объект.ЯзыкПрограммирования = ВыборкаЯзыковИКлючевыхСлов.ЯзыкПрограммирования;
					//Объект.Специализация = Объект.Специализация;
					Объект.Город = ГородаСправочник.Ссылка;
					 МассивСтанцииМетро = ПолучитьМассивСтанцииМетро();
					Объект.МассивСтанцииМетро.Загрузить(МассивСтанцииМетро);
					КлючевоеСлово = СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово);
					ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с HH:" + " Город " + Объект.Город.Наименование + " " +  " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
					ЗаполнитьВакансииHHСервере();
					ДобавитьЗаписьВЖУрналРегистрацииАдм("Вакансии с SuperJob:" + " Город " + Объект.Город.Наименование + " " +  " Язык" + " " +СокрЛП(ВыборкаЯзыковИКлючевыхСлов.КлючевоеСлово));
					ЗаполнитьВакансииSuperJobНаСервере();
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	
	
	Объект.Город = Справочники.Города.ПустаяСсылка();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Если УзнатьПользователяБазы() = "ФоновоеЗадание" или УзнатьПользователяБазы() = "ФоновоеЗаданиеМосква" Тогда
		Если УзнатьПользователяБазы() <> "ФоновоеЗадание" Тогда
			ВремяЗапуска = ТекущаяДата();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Запускаем обработку " + Строка(ВремяЗапуска));
			ЗаполнитьСоВсехСайтов(Неопределено);
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Готово.Вакансии актуальны, времени затрачено: "  +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));		
			ВремяЗапуска = ТекущаяДата();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Проверка вакансий Удаленная работа по 1С " +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));
			ЗаполнитьВакансииHHСервереУдаленка();
		Иначе
			ВремяЗапуска = ТекущаяДата();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Запускаем обработку " + Строка(ВремяЗапуска));
			ЗаполнитьСоВсехСайтов(Неопределено);
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Готово.Вакансии актуальны, времени затрачено: "  +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));		
			ВремяЗапуска = ТекущаяДата();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Проверка вакансий Удаленная работа по 1С " +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));
			ЗаполнитьВакансииHHСервереУдаленка();
			ВремяЗапуска = ТекущаяДата();			
			ПроверитьВакансииНаАктуальностьНаСервере();
			ДобавитьЗаписьВЖУрналРегистрацииАдм("Проверка вакансий в архиве выполнено, времени затрачено: " +Окр((ТекущаяДата()-ВремяЗапуска )/60,2));
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);			
	КонецЕсли;
КонецПроцедуры

Функция УзнатьПользователяБазы()
	
	ПользовательТек = ПользователиИнформационнойБазы.ТекущийПользователь();	
	
	Возврат	 ПользовательТек.Имя
КонецФункции	

Процедура  ДобавитьЗаписьВЖУрналРегистрации(Комментарий)
	ЗаписьЖурналаРегистрации("ОбновлениеВакансий", УровеньЖурналаРегистрации.Информация, , , Комментарий);			
КонецПроцедуры	

Процедура  ДобавитьЗаписьВЖУрналРегистрацииАдм(Комментарий)
	ЗаписьЖурналаРегистрации("ОбновлениеВакансий Адм", УровеньЖурналаРегистрации.Информация, , , Комментарий);			
КонецПроцедуры	

&НаКлиенте
Процедура ЗапросНаОднуВакансию(Команда)
	Вакансия = ЗапросНаОднуВакансиюНаСервереHH("35268686");
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(Вакансия.description);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML); 
	ТекстСообщенияЧистыйТекст=ДокументHTML.Тело.ТекстовоеСодержимое;
	
	Если Вакансия.schedule.name = "удаленная работа" Тогда
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЗапросНаОднуВакансиюНаСервереHH(ВакансияНомер = Неопределено)
	СайтВладелец = Перечисления.СайтыВладельцы.HHRU;
	//КоличествоНовыхСозданныхВакансий = 0;		
	
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,,Защ);
	СтрокаСоединенияГлав = "/vacancies/32829966";
	//ВакансияНоме1р = "34982981";	
	Если ЗначениеЗаполнено(ВакансияНомер) Тогда
		СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"32829966",ВакансияНомер);	
	КонецЕсли;	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединенияГлав);	
	HTTPЗапрос.Заголовки.Вставить("User-Agent", "api-test-agent");
	
	Попытка
		ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение	
		ПаузаВЦикле(2);	
		Попытка
			ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
			ЗапросНаОднуВакансиюНаСервереHH(ВакансияНомер );
		Исключение
			//ДобавитьЗаписьВЖУрналРегистрации("Ошибка при получении вакансии" + " " +ВакансияНомер);
			Возврат Неопределено;	
		КонецПопытки;
		
	КонецПопытки;
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Результат= Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	//ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
	
	ОбработатьJSON(ЧтениеJSON, Результат);
	//Здесь на выходе из процедуры Результат = Соответствие;	
	
	
	
	ВакансияПолн =  ПолучитьСтруктуруИзСоответствия(Результат); 	
	
	Возврат ВакансияПолн;
КонецФункции

&НаСервере
Функция ЗапросНаОднуВакансиюНаСервереSUPERJOBRU(ВакансияНомер = Неопределено)
	
	СайтВладелец = Перечисления.СайтыВладельцы.SUPERJOBRU;
	СекретныйКлюч = "v3.r.124671209.d63d54624b2d6856d6969d1cd96fffbcf56b2349.7e1ec555913fb9b33d5ba1cc259e8e244eacb22c";
	ID = "1083";
	//КоличествоНовыхСозданныхВакансий = 0;		
	// api.hh.ru/vacancies
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.superjob.ru",,,,,,Защ);
	//СтрокаСоединения = "/2.0/vacancies/";
	СтрокаСоединения = "/2.0/oauth2/password/?login=zitritim@gmail.com&password=Zw1318nez&client_id=1083&client_secret=v3.r.124671209.d63d54624b2d6856d6969d1cd96fffbcf56b2349.7e1ec555913fb9b33d5ba1cc259e8e244eacb22c";
	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);	
	//ЗаголовкиHTTP = Новый djq;
	//ЗаголовкиHTTP.Вставить("GET " + "https://api.superjob.ru/2.0/vacancies/");
	
	//Ответ=HTTPСоединение.Получить("api.superjob.ru"+СтрокаСоединения+ "/vacancies");//POST	
	//Ответ=HTTPСоединение.Получить(ЗаголовкиHTTP);
	
	ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"date_pub_to,date_published",ФорматДатыJSON.ISO);
	
	access_token = ПолучитьИзСоответствия(ДанныеКлиента,"access_token");
	
	СтрокаПоиска = "Программист 1С";
	//СтрокаПоиска = КодироватьСтроку(СтрокаПоиска, СпособКодированияСтроки.КодировкаURL);
	//СтрокаСоединения = "2.0/vacancies/?t=2&count=100&keywords=" + СтрокаПоиска + "&keywords=программист";
	СтрокаСоединения = "2.0/vacancies/31910897/";
	//СтрокаСоединения = "2.0/vacancies/&id=32164792";
	Если ЗначениеЗаполнено(ВакансияНомер) Тогда
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения,"31910897",ВакансияНомер);	
	КонецЕсли;		
	
	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);
	HTTPЗапрос.Заголовки.Вставить("X-Api-App-Id", СекретныйКлюч);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + access_token);
	
	ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	
	ОбработатьJSON(ЧтениеJSON, Результат);
	
	//Здесь на выходе из процедуры Результат = Соответствие;	
	Вакансия =  ПолучитьСтруктуруИзСоответствия(Результат); 
	
	Возврат	Вакансия;
КонецФункции

&НаКлиенте
Процедура ПроверитьВакансииНаАктуальность(Команда)
	ПроверитьВакансииНаАктуальностьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьВакансииНаАктуальностьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вакансии.Ссылка КАК Ссылка,
	|	Вакансии.СайтВладелец КАК СайтВладелец,
	|	Вакансии.НомерHH КАК НомерHH
	|ИЗ
	|	Документ.Вакансии КАК Вакансии
	|ГДЕ
	|	Вакансии.ПометкаУдаления = ЛОЖЬ
	|	И Вакансии.ВАрхиве = ЛОЖЬ
	|	И Вакансии.Город = ЗНАЧЕНИЕ(Справочник.Города.Москва)
	|	И Вакансии.Скрыта = ЛОЖЬ
	//|	И Вакансии.НомерHH = ""37621983""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вакансии.Номер";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если 	Выборка.СайтВладелец = Перечисления.СайтыВладельцы.HHRU Тогда
			//Продолжить;	
			АктуальнаяВерсияВакансии = ЗапросНаОднуВакансиюНаСервереHH(Выборка.НомерHH);
			
			Если АктуальнаяВерсияВакансии.description = "Not Found" Тогда
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.Скрыта = Истина;
				ВакансияОбъект.ДатаАрхивацииВакансии = ТекущаяДата();
				ВакансияОбъект.Записать();				
			ИначеЕсли   АктуальнаяВерсияВакансии.archived = Истина Тогда		
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.ВАрхиве = Истина;
				ВакансияОбъект.ДатаАрхивацииВакансии = ТекущаяДата();
				ВакансияОбъект.Записать();
			Иначе 
				Если Выборка.Ссылка.ДобавилиМетроИзОписания = Ложь и Не ЗначениеЗаполнено(Выборка.Ссылка.Метро) Тогда
				
	            СписокСтанций =  ПоискСтанцийМетроВОписании(АктуальнаяВерсияВакансии.description);
				Если СписокСтанций.Количество() <> 0 Тогда
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.ДобавилиМетроИзОписания = Истина;					
				ДобавитьЗаписиОЯзыкамВВакансияИСтанциямМетро(ВакансияОбъект,СписокСтанций);
				ВакансияОбъект.Метро = СписокСтанций[0].Значение.Ссылка;	
				ВакансияОбъект.Описание = АктуальнаяВерсияВакансии.description;
				ВакансияОбъект.Записать();		
				ИначеЕсли ПустаяСтрока(Выборка.Ссылка.Описание) Тогда				
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.Описание = АктуальнаяВерсияВакансии.description;
				ВакансияОбъект.Записать();	
				
				КонецЕсли;
			
				//  Если АктуальнаяВерсияВакансии.schedule.id = "remote" Тогда
				//ВакансияОбъект.УдаленнаяРабота = Истина;	
				//КонецЕсли;
				ИначеЕсли ПустаяСтрока(Выборка.Ссылка.Описание) Тогда
				
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.Описание = АктуальнаяВерсияВакансии.description;
				ВакансияОбъект.Записать();	
				КонецЕсли;
				

			КонецЕсли;	
			
			//СуперДжоб
		ИначеЕсли 	Выборка.СайтВладелец = Перечисления.СайтыВладельцы.SUPERJOBRU Тогда
			АктуальнаяВерсияВакансии = 	ЗапросНаОднуВакансиюНаСервереSUPERJOBRU(Выборка.НомерHH);
			
			Если АктуальнаяВерсияВакансии.Свойство("error") и  (АктуальнаяВерсияВакансии.error.error = "vacancy_closed" или АктуальнаяВерсияВакансии.error.error =  "vacancy_not_found") Тогда
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.Скрыта = Истина;
				ВакансияОбъект.ДатаАрхивацииВакансии = ТекущаяДата();
				ВакансияОбъект.Записать();			
			ИначеЕсли АктуальнаяВерсияВакансии.is_archive = Истина Тогда 
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.ВАрхиве = Истина;
				ВакансияОбъект.ДатаАрхивацииВакансии = Дата(1970,1,1,3,0,0)  + АктуальнаяВерсияВакансии.date_archived ;
				ВакансияОбъект.Записать();	
			Иначе 
				Если Выборка.Ссылка.ДобавилиМетроИзОписания = Ложь и Не ЗначениеЗаполнено(Выборка.Ссылка.Метро) Тогда
				
	            СписокСтанций =  ПоискСтанцийМетроВОписании(АктуальнаяВерсияВакансии.vacancyRichText);
				Если СписокСтанций.Количество() <> 0 Тогда
				ВакансияОбъект =  Выборка.Ссылка.ПолучитьОбъект();
				ВакансияОбъект.ДобавилиМетроИзОписания = Истина;					
				ДобавитьЗаписиОЯзыкамВВакансияИСтанциямМетро(ВакансияОбъект,СписокСтанций);
				ВакансияОбъект.Метро = СписокСтанций[0].Значение.Ссылка;
				ВакансияОбъект.Записать();
				КонецЕсли;
				КонецЕсли;								
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеСпециализации(НаименованиеВакансии);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯзыкиПрограммированияСловаВхождения.Слово.Наименование КАК СловоНаименование
	|ИЗ
	|	Справочник.ЯзыкиПрограммирования.СловаВхождения КАК ЯзыкиПрограммированияСловаВхождения
	|ГДЕ
	|	ЯзыкиПрограммированияСловаВхождения.Ссылка = &ЯзыкПрограммирования";
	
	Запрос.УстановитьПараметр("ЯзыкПрограммирования", Объект.ЯзыкПрограммирования);
	//Запрос.УстановитьПараметр("ЯзыкПрограммирования", Объект.ЯзыкПрограммирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если	Найти(Нрег(НаименованиеВакансии),Нрег(Выборка.СловоНаименование)) <> 0  Тогда
			
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

Функция ПоискЯзыкаПрограммирования(НаименованиеВакансии);
	СписокЯзыков  = Новый СписокЗначений;	
	СписокВхождений  = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯзыкиПрограммирования.Наименование КАК Язык,
	|	СодержащиеВВакансииСферыСлова.Наименование КАК КлючевоеСлово,
	|	ЯзыкиПрограммирования.Ссылка КАК ЯзыкСсылка,
	|	СодержащиеВВакансииСферыСлова.Ссылка КАК СодержащиеВВакансииСферыСловаСсылка
	|ИЗ
	|	Справочник.ЯзыкиПрограммирования КАК ЯзыкиПрограммирования,
	|	Справочник.СодержащиеВВакансииСферыСлова КАК СодержащиеВВакансииСферыСлова
	|ГДЕ
	|	СодержащиеВВакансииСферыСлова.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Специализация);
	//Запрос.УстановитьПараметр("ЯзыкПрограммирования", Объект.ЯзыкПрограммирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если	Найти(Нрег(НаименованиеВакансии),Нрег(Выборка.КлючевоеСлово)) <> 0 И Найти(Нрег(НаименованиеВакансии),Нрег(Выборка.Язык)) <> 0 Тогда
			
			Если Найти(Нрег(Выборка.Язык),"1c") <> 0 или Найти(Нрег(Выборка.Язык),"1с") <> 0 Тогда  	
				//	
				Если 	 (Найти(Нрег(НаименованиеВакансии),Нрег("битрикс")) <>  0 или Найти(Нрег(НаименованиеВакансии),Нрег("bitrix")) <>  0) Тогда
					Продолжить;	
				КонецЕсли	
				//		
			КонецЕсли;	
			СписокВхождений.Добавить(Выборка.СодержащиеВВакансииСферыСловаСсылка);
			СписокЯзыков.Добавить(Выборка.ЯзыкСсылка) ;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИДВакансии) Тогда
	СписокЯзыков.Добавить(Справочники.ЯзыкиПрограммирования.ОдинЭс) ;	
	КонецЕсли;	
	Возврат СписокЯзыков;
КонецФункции

Процедура ДобавитьЗаписиОЯзыкамВВакансияИЯзыкиПрограммирования(НоваяВакансия,СписокЯзыков);
	
	
	Для каждого Язык из СписокЯзыков Цикл
		МенеджерЗаписи = РегистрыСведений.ВакансияИЯзыкиПрограммирования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Вакансия = НоваяВакансия.Ссылка;	
		МенеджерЗаписи.ЯзыкПрограммирования = Язык.Значение.Ссылка;
		МенеджерЗаписи.НаименованиеВакансии = НоваяВакансия.НаименованиеВакансии;
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Специализация =  Справочники.Специализации.НайтиПоКоду("000000001");
	Объект.Город = Справочники.Города.Москва;
	МассивСтанцииМетро = ПолучитьМассивСтанцииМетро();
	
	//Для каждого строка из МассивСтанцииМетро Цикл
	Объект.МассивСтанцииМетро.Загрузить(МассивСтанцииМетро);	
	
	//КонеЦикла;	
КонецПроцедуры


Процедура ПаузаВЦикле(КоличествоМинут)
	ВСекундах = 60*КоличествоМинут;
	КонДата = ТекущаяДата() + ВСекундах;
	Пока ТекущаяДата() < КонДата Цикл
		// ждемссс....
	КонецЦикла;		
КонецПроцедуры	


Функция ПолучитьМассивСтанцииМетро()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтанцииМетро.Наименование КАК НаименованиеСтанции,
	|	СтанцииМетро.Ссылка КАК СсылкаСтанции
	|ИЗ
	|	Справочник.СтанцииМетро КАК СтанцииМетро
	|ГДЕ
	|	СтанцииМетро.Владелец.Владелец = &Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	СтанцииМетро.Наименование,
	|	СтанцииМетро.Ссылка";
	Запрос.УстановитьПараметр("Владелец", Объект.Город);
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	Возврат Результат;
КонецФункции // НайтиСтанцииМетро()

&НаСервере
Процедура ГородПриИзмененииНаСервере()
	МассивСтанцииМетро = ПолучитьМассивСтанцииМетро();
	Объект.МассивСтанцииМетро.Загрузить(МассивСтанцииМетро);
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	ГородПриИзмененииНаСервере();
КонецПроцедуры

Процедура ДобавитьЗаписиОЯзыкамВВакансияИСтанциямМетро(НоваяВакансия,СписокСтанций);
	
	
	Для каждого Станция из СписокСтанций Цикл
		МенеджерЗаписи = РегистрыСведений.ВакансияИСтанцииМетро.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Вакансия = НоваяВакансия.Ссылка;	
		МенеджерЗаписи.Станция = Станция.Значение;
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПоискСтанцийМетроВОписании(НаименованиеВакансии);
	СписокСтанций  = Новый СписокЗначений;	
	
	Для каждого СтрокаСтанция из Объект.МассивСтанцииМетро Цикл
		
		Если Найти(НаименованиеВакансии,СтрокаСтанция.НаименованиеСтанции) <> 0 Тогда
			
			
			СписокСтанций.Добавить(СтрокаСтанция.СсылкаСтанции) ;
		КонецЕсли;;
	КонецЦикла;	
	
	Возврат СписокСтанций;
КонецФункции

Функция ПреобразоватьHTMLВТекст(ВакансияИмя)

		Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ВакансияИмя);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML); 
	ТекстСообщенияЧистыйТекст=ДокументHTML.Тело.ТекстовоеСодержимое;

	Возврат ТекстСообщенияЧистыйТекст
КонецФункции // ПреобразоватьHTMLВТекст()

&НаКлиенте
Процедура Удаленка(Команда)
	УдаленкаНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдаленкаНаСервере()
	//Ищем удаленку по всем россии по вакансии программиста 1С,отдельна процедура потом доработка делаем в справочники города
	// Есть суперджоб а есть hh	
	//Ставим галку удаленнпая работая
	//Если вакансия в москве то ставим город 
	
	// Сделать журная для удаленной работы
	Удаленка = Истина;
	ЗаполнитьВакансииHHСервереУдаленка();
	
	КонецПроцедуры
	
	
&НаСервере
Процедура ЗаполнитьВакансииHHСервереУдаленка()
	Удаленка = Истина;
	КлючевоеСлово = "";
	Город = Объект.Город;
	//Город = Справ
	СайтВладелец = Перечисления.СайтыВладельцы.HHRU;
	//КоличествоНовыхСозданныхВакансий = 0;		
	// api.hh.ru/vacancies
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,,Защ);
	//СтрокаСоединения = "/vacancies";
	//СтрокаСоединения = "/api.hh.ru/vacancies?text=java&area=1&metro=6.8";
	// Зарплата 140к &salary=140000
	СтрокаСоединенияГлав = "/vacancies?schedule=remote&text=программист 1С&area=113&per_page=100";
	
	//КлючевоеСлово = "Программист / Разработчик 1 С";
	// &archived=true 
	//Если ЗначениеЗаполнено(КлючевоеСлово) Тогда
	//	СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"программист 1С",СокрЛП(КлючевоеСлово));		
	//КонецЕсли;	
	
	//Если ЗначениеЗаполнено(Город) Тогда
	//	СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"&area=1","&area="+Город.Идентификатор);		
	//КонецЕсли;	
	
	Для СтраницаСайта = 0 По 20 Цикл
		//Первые 100 вакансий per_page=100
		
		//ДобавитьЗаписьВЖУрналРегистрации("Страница " + Строка(СтраницаСайта)); //Страницы с Нулевой page=0
		
		СтрокаСоединения = СтрокаСоединенияГлав + "&page=" + СтраницаСайта ;
		
		//СтрокаСоединения = "/metro";
		
		//Полное представление вакансии
		//СтрокаСоединения = "/vacancies/33773371";
		
		HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединения);	
		HTTPЗапрос.Заголовки.Вставить("User-Agent", "api-test-agent");
		//HTTPЗапрос.Заголовки.Вставить("per_page", "10");
		
		ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
		Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
		
		НайденноВакансий = ПолучитьИзСоответствия(ДанныеКлиента,"found");
		КоличествоСтраниц = ПолучитьИзСоответствия(ДанныеКлиента,"pages");
		Ключ = "items";
		
		Массивitems = ДанныеКлиента.Получить(Ключ);
		
		Если Массивitems = Неопределено или Массивitems.Количество() = 0 Тогда 
			Прервать;	
		КонецЕсли;	
		КоличествоВакансийВСтранице = Массивitems.Количество();
		НомерВакансии = 0;
		Для Каждого Вакансия Из Массивitems Цикл
			НомерВакансии = НомерВакансии +1;
			//ДобавитьЗаписьВЖУрналРегистрации("Вакансия " + Строка(НомерВакансии)+ " из: " + Строка(КоличествоВакансийВСтранице));
			//Работодатель
			ключРаботодателя = "employer";
			ключНаименование ="name";
			ключКодРаботодателя = "id";
			
			Работодатель = ПолучитьИзСоответствия(Вакансия,ключРаботодателя);
			РаботодательНаименование =  ПолучитьИзСоответствия(Работодатель,ключНаименование); 
			РаботодательКод =  ПолучитьИзСоответствия(Работодатель,ключКодРаботодателя); 
			
			//РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);
			//
			//Если РаботодательСсылка = Неопределено Тогда
			//	РаботодательСсылка = СоздатьРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);			
			//КонецЕсли;	
			////Работодатель Конец
			//
			НаименованиеВакансии = ПолучитьИзСоответствия(Вакансия,ключНаименование);
			//
			СтруктураВакансии =   ПолучитьСтруктуруИзСоответствия(Вакансия); 
			//
			ВакансияСсылка = НайтиВакансию(СтруктураВакансии.id,СайтВладелец) ;
			
		Если ВакансияСсылка <> Неопределено Тогда
			Если ВакансияСсылка.Работодатель = Справочники.Работодатели.ПустаяСсылка() Тогда
				
		РаботодательСсылка =	 НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
	
					Иначе
				РаботодательСсылка = ВакансияСсылка.Работодатель;
				
		КонецЕсли;		
			Иначе				
				РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
			КонецЕсли;	
	
			СоздатьОбновитьВакансию(СтруктураВакансии.name,ВакансияСсылка,СтруктураВакансии,РаботодательСсылка,СайтВладелец,РаботодательКод,РаботодательНаименование);			
			
			
			
			//Прервать;	
		КонецЦикла;	
		//Прервать;
	КонецЦикла;
	Удаленка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуВакансию(Команда)
	ЗагрузитьОднуВакансиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОднуВакансиюНаСервере()
	Город = Объект.Город;
	СайтВладелец = Перечисления.СайтыВладельцы.HHRU;
	//КоличествоНовыхСозданныхВакансий = 0;		
	// api.hh.ru/vacancies
	Защ = новый ЗащищенноеСоединениеOpenSSL;	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,,Защ);
	//СтрокаСоединения = "/vacancies";
	//СтрокаСоединения = "/api.hh.ru/vacancies?text=java&area=1&metro=6.8";
	// Зарплата 140к &salary=140000
	//СтрокаСоединенияГлав = "/vacancies?text=программист 1С&area=1&per_page=100";
	
	СтрокаСоединенияГлав = "/vacancies/32829966";
	//ВакансияНоме1р = "34982981";	
	Если ЗначениеЗаполнено(ИДВакансии) Тогда
		СтрокаСоединенияГлав = СтрЗаменить(СтрокаСоединенияГлав,"32829966",ИДВакансии);	
	КонецЕсли;	
	HTTPЗапрос = Новый HttpЗапрос(СтрокаСоединенияГлав);	
	HTTPЗапрос.Заголовки.Вставить("User-Agent", "api-test-agent");
	
	Попытка
		ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение	
		ПаузаВЦикле(2);	
		Попытка
			ОтветHTTP = HTTPСоединение.Получить(HTTPЗапрос);
			ЗапросНаОднуВакансиюНаСервереHH(ИДВакансии );
		Исключение
			//ДобавитьЗаписьВЖУрналРегистрации("Ошибка при получении вакансии" + " " +ВакансияНомер);
			Возврат;	
		КонецПопытки;
		
	КонецПопытки;
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Результат= Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	//ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
	ДанныеКлиента = ПрочитатьJSON(ЧтениеJSON, Истина,"created_at,published_at",ФорматДатыJSON.ISO);
	
	//ОбработатьJSON(ЧтениеJSON, Результат);
	//Здесь на выходе из процедуры Результат = Соответствие;	
	
	
	
	Вакансия =  ПолучитьСтруктуруИзСоответствия(ДанныеКлиента); 	
	
	
	//НомерВакансии = НомерВакансии +1;
	//ДобавитьЗаписьВЖУрналРегистрации("Вакансия " + Строка(НомерВакансии)+ " из: " + Строка(КоличествоВакансийВСтранице));
	//Работодатель
	ключРаботодателя = "employer";
	ключНаименование ="name";
	ключКодРаботодателя = "id";
	
	//Работодатель = Вакансия.employer.id);
	РаботодательНаименование =  Вакансия.employer; 
	РаботодательКод =  Вакансия.employer.id; 
	
	//РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);
	//
	//Если РаботодательСсылка = Неопределено Тогда
	//	РаботодательСсылка = СоздатьРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);			
	//КонецЕсли;	
	////Работодатель Конец
	//
	НаименованиеВакансии = Вакансия.name;
	//
	СтруктураВакансии =  Вакансия; 
	//
	ВакансияСсылка = НайтиВакансию(СтруктураВакансии.id,СайтВладелец) ;
	
	Если ВакансияСсылка <> Неопределено Тогда
		Если ВакансияСсылка.Работодатель = Справочники.Работодатели.ПустаяСсылка() Тогда
			
			РаботодательСсылка =	 НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
			
		Иначе
			РаботодательСсылка = ВакансияСсылка.Работодатель;
			
		КонецЕсли;		
	Иначе				
		РаботодательСсылка =  НайтиРаботодателя(РаботодательНаименование,РаботодательКод,СайтВладелец);	
	КонецЕсли;	
	
	СоздатьОбновитьВакансию(СтруктураВакансии.name,ВакансияСсылка,СтруктураВакансии,РаботодательСсылка,СайтВладелец,РаботодательКод,РаботодательНаименование);			
	
	
	 Сообщить(СтруктураВакансии.id + " Успех ");
	//Прервать;	
	//	КонецЦикла;	
	//Прервать;
	//КонецЦикла;
	
КонецПроцедуры
